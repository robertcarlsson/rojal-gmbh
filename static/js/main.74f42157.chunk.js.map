{"version":3,"sources":["Sun/Sun.js","Question/Question.js","survey.jsx","App.js","serviceWorker.js","index.js"],"names":["sunLight","Sun","props","min_val","max_val","value","height","SunLimitation","y","X_VALUE","window","innerWidth","x","draggable","radius","fill","onDragEnd","dragBoundFunc","pos","SetValue","norm","Math","floor","SunValue","min_height","innerHeight","middle","bgColor","Question","state","setState","setValue","width","this","points","stroke","text","toString","fontSize","question","align","Component","questions","Survey","pageNumber","status1","status2","status3","status4","showNextPage","bind","showPrevPage","renderQuestion","pageNum","console","log","style","backgroundColor","className","onClick","React","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74f42157.chunk.js","sourcesContent":["import React from \"react\";\n\n//import Konva from \"konva\";\nimport { Circle } from \"react-konva\";\nimport \"./Sun.css\";\n\n//const min_val = 200;\n//const max_val = window.innerHeight / 2;\n\n// const sunDark = \"#ff6600\";\nexport const sunLight = [\n  0,\n  \"#ff6600\",\n  \"#ff9900\",\n  \"#ffbb00\",\n  \"#ffcc00\",\n  \"#ffff00\"\n];\n\nexport default function Sun(props) {\n  //const [color, setColor] = React.useState(\"#ffdd88\");\n  const { min_val, max_val, value } = props;\n  const height = max_val - min_val;\n  const SunLimitation = y => {\n    if (y < min_val) return min_val;\n    if (y > max_val) return max_val;\n    return y;\n  };\n\n  const SunValue = y => {\n    const val = y - min_val;\n    const norm = (height - val) / height;\n    const score = Math.floor(norm * 4) + 1;\n    return score;\n  };\n\n  const X_VALUE = window.innerWidth / 2;\n\n  return (\n    <Circle\n      x={X_VALUE}\n      y={max_val}\n      draggable\n      radius={50}\n      fill={sunLight[value]}\n      onDragEnd={() => {\n        //props.SetValue()\n        //setColor(Konva.Util.getRandomColor());\n      }}\n      dragBoundFunc={pos => {\n        props.SetValue(SunValue(SunLimitation(pos.y)));\n        return { x: X_VALUE, y: SunLimitation(pos.y) };\n      }}\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport { Stage, Layer, Line, Rect, Text } from \"react-konva\";\n\nimport Sun from \"../Sun/Sun\";\n//import { thisExpression } from \"@babel/types\";\n\nexport const max_height = 200;\nexport const min_height = window.innerHeight / 1.3;\nexport const middle = window.innerWidth / 2;\n\n//const bgDark = \"#110033\";\n//const bgLight = \"#66b3ff\";\n\nexport const bgColor = [\n  0,\n  \"#110033\",\n  \"#222377\",\n  \"#335399\",\n  \"#5593bb\",\n  \"#66b3ff\"\n];\n\nclass Question extends Component {\n  state = {\n    value: 1\n  };\n\n  SetValue = value => {\n    this.setState({ value: value });\n    this.props.setValue(value);\n  };\n\n  render() {\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight - 80}>\n        <Layer>\n          <Rect\n            x={0}\n            y={0}\n            fill={bgColor[this.state.value]}\n            width={window.innerWidth}\n            height={window.innerHeight}\n          />\n          <Sun\n            SetValue={this.SetValue}\n            min_val={max_height}\n            max_val={min_height}\n            value={this.state.value}\n          />\n          <Rect\n            x={0}\n            y={min_height}\n            fill={bgColor[this.state.value]}\n            width={window.innerWidth}\n            height={window.innerHeight}\n          />\n\n          <Line\n            points={[50, min_height, window.innerWidth - 50, min_height]}\n            stroke=\"black\"\n          />\n          <Text\n            x={middle - 150}\n            y={min_height - 50}\n            text={this.state.value.toString()}\n            fontSize={50}\n            fill=\"white\"\n          />\n          <Text\n            x={middle - 160}\n            y={25}\n            text={this.props.question}\n            fontSize={35}\n            width={340}\n            align=\"center\"\n            fill=\"white\"\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default Question;\n","import React from \"react\";\nimport \"./survey.css\";\n//import ProgressBar from \"./progressBar/progressBar\";\n\nimport { sunLight } from \"./Sun/Sun\";\nimport Question, { bgColor } from \"./Question/Question\";\n\nconst questions = [\n  \"Hur väl uppfyller Valtech dina förväntingar?\",\n  \"Hur väl trivs du på din arbetsplats?\",\n  \"Hur upplever du inomhustemperaturen på kontoret?\",\n  \"Något annat du tänkt på\",\n  \"\",\n  \"Sluta leta buggar\"\n];\n\nclass Survey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNumber: 1,\n      status1: \"completed\",\n      status2: \"\",\n      status3: \"\",\n      status4: \"\",\n      value: 1\n    };\n    this.showNextPage = this.showNextPage.bind(this);\n    this.showPrevPage = this.showPrevPage.bind(this);\n    this.renderQuestion = this.renderQuestion.bind(this);\n  }\n\n  showNextPage() {\n    const pageNum = this.state.pageNumber + 1;\n    this.setState({ pageNumber: pageNum });\n    if (pageNum > 0) {\n      this.setState({ status1: \"completed\" });\n    }\n    if (pageNum > 1) {\n      this.setState({ status2: \"completed\" });\n    }\n    if (pageNum > 2) {\n      this.setState({ status3: \"completed\" });\n    }\n    if (pageNum > 3) {\n      this.setState({ status4: \"completed\" });\n    }\n  }\n\n  showPrevPage() {\n    const pageNum = this.state.pageNumber - 1;\n    this.setState({ pageNumber: pageNum });\n    this.setState({ pageNumber: pageNum });\n    if (pageNum <= 0) {\n      this.setState({ status1: \"\" });\n    }\n    if (pageNum <= 1) {\n      this.setState({ status2: \"\" });\n    }\n    if (pageNum <= 2) {\n      this.setState({ status3: \"\" });\n    }\n    if (pageNum <= 3) {\n      this.setState({ status4: \"\" });\n    }\n  }\n\n  renderQuestion() {\n    let question = \"\";\n    if (this.state.pageNumber === 1) {\n      question = \"Hur väl uppfyller Valtech dina förväntingar?\";\n    } else if (this.state.pageNumber === 2) {\n      question = \"Hur väl trivs du på din arbetsplats?\";\n    } else if (this.state.pageNumber === 3) {\n      question = \"Hur mår du egentligen?\";\n    } else if (this.state.pageNumber === 4) {\n      question = \"Var du ärlig?\";\n    }\n    console.log(sunLight);\n    return <p> {question} </p>;\n  }\n  setValue = value => {\n    this.setState({ value: value });\n  };\n\n  render() {\n    return (\n      <div style={{ backgroundColor: bgColor[this.state.value] }}>\n        <ul className=\"progress-indicator progress-bar\">\n          <li className={this.state.status1}>\n            {\" \"}\n            <span className=\"bubble\"></span>\n          </li>\n          <li className={this.state.status2}>\n            {\" \"}\n            <span className=\"bubble\"></span>\n          </li>\n          <li className={this.state.status3}>\n            {\" \"}\n            <span className=\"bubble\"></span>{\" \"}\n          </li>\n          <li className={this.state.status4}>\n            {\" \"}\n            <span className=\"bubble\"></span>{\" \"}\n          </li>\n        </ul>\n        <Question\n          question={questions[this.state.pageNumber - 1]}\n          setValue={this.setValue}\n        />\n        <div className=\"buttons\">\n          {this.state.pageNumber > 1 ? <button onClick={this.showPrevPage} className=\"bakat\" >\n            Bakåt\n          </button> : <button></button> }\n          {this.state.pageNumber < 6 ?\n          <button onClick={this.showNextPage} className=\"framat\" >\n            Framåt\n          </button> : <button></button> }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Survey;\n","import React from \"react\";\nimport Survey from \"./survey\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Survey />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import Survey from \"./survey\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}